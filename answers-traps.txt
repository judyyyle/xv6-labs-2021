Question 1: Which registers contain arguments to functions? For example, which register holds 13 in main's call to printf?
Answer: a0, a1, a2等通用寄存器；a2。

Question 2: Where is the call to function f in the assembly code for main? Where is the call to g? (Hint: the compiler may inline functions.)
Answer: 通过阅读call.c的代码可以知道，函数f调用函数g。但是在汇编call.asm代码中，在“printf("%d %d\n", f(8)+1, 13);”处并没有调用f，而是直接用结果12所代替，这是因为编译器内链了一些函数，在运行之前将结果计算出，就不需要再调用函数进行计算。

Question 3: At what address is the function printf located?
Answer: 通过搜索call.asm文件可以找到printf函数的地址是0x630。

Question 4: What value is in the register ra just after the jalr to printf in main?
Answer: 0x38

Question 5: Run the following code.
	unsigned int i = 0x00646c72;
	printf("H%x Wo%s", 57616, &i);    
What is the output?
The output depends on that fact that the RISC-V is little-endian. If the RISC-V were instead big-endian what would you set i to in order to yield the same output? Would you need to change 57616 to a different value?
Answer: He110 World；i = 0x726c64；57616不需要改。


Question 6: In the following code, what is going to be printed after 'y='? (note: the answer is not a specific value.) Why does this happen?
	printf("x=%d y=%d", 3);
Answer: 由于printf需要两个参数，但实际中只给了一个，因此“x=%d”会输出3，而“y=%d”的输出无法确定，它会从此寄存器中获取到一个随机的不确定的值作为其参数。
      